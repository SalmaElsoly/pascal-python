////////////////////////////////////////////--Program Skeleton---//////////////////////////////////////////////////////////////
Program →  Header Declsec Block
Header  →  ProgramID Uses
ProgramID →  program identifier ;
Uses →  uses PackageList ; | Epsilon

PackageList    →  PackageList Package , | Package
PackageList → Package PackaList*
PackageList* → , Package PackageList’ | ε
////////////////////////////////////////////---Declaration---//////////////////////////////////////////////////////////////
Declsec  →   Decls ProcedureDecS
Decls    →  Option Decls | Epsilon
Option -> VarDecls |  ConstDecls |  TypeDecl

VarDecls → var VarDecl | ε
VarDecl → VarldList : Datatype; VarDecl2
VarDecl2 → VarDecl | ε

TypeDecl →  type identifier = Datatype;
TypeDecl → VarIDList = Datatype ; TypeDecl2
TypeDecl2 → TypeDecl | ε

VarldList → identifier VarldList*
VarldList* → , identifier VarldList* |ε

Datatype        →  integer| real| char| string| Boolean
ConstDecls    → const Constld | ε

Constld → identifier = Constant; Constld*
Constld* →  identifier = Constant; Constld* |ε
Constant →  constant | string| boolean
//////////////////////////////////////////////////---Procedure---/////////////////////////////////////////////////////////////////////
ProcedureDecS → FP ProcedureDecS*| ε
FP →  FuncDecS | ProcedureDec
ProcedureDeclarationSection2 → FuncDecS ProcedureDeclarationSection2| ProcedureDec ProcedureDeclarationSection2 |ε
ProcedureDec → ProcedureHeader FPDecl ProcedureBlock
ProcedureBlock → begin Statements end;
ProcedureHeader →  procedure ProcedureName ArgumentOption ;
ProcedureName → identifier
ParametersList → identifier ParametersList2 | constant ParametersList2
ParametersList2 → , ParametersList| ε

////////////////////////////////////////////////---Function---////////////////////////////////////////////////////////////////
FuncDecS → FunctionHeader VarDecls FunctionBlock
FunctionHeader →  function FunctionName ArgumentOption : Datatype;
FunctionName → identifier
FunctionBlock → begin FunctionStatements end;
FunctionStatements  → Statements FunctionName := AssignedValue ;
ArgumentOption -> (ArgumentsIdList) | Epsilon
ArgumentsIdList → OptionArg ParametersList : Datatype DefaultValue ArgsEnd
ArgsEnd  ; ArgumentsIdList | Epsilon
OptionArg → const | var | ε
DefaultValue → ε | = Constant
AssignedValue → Expression | string ; | identifier ; | constant
Expression → Term Exp
Exp → AddOp Term Exp |ε
Term → Factor Term2
Term2 → MultOp Factor Term2 |ε
Factor → identifier|(Expression) | constant
////////////////////////////////////////////////---Operators---////////////////////////////////////////////////////////
BoolOp → < | > | = | <= | >= | <> | not | and | or | xor
ArithmOp → MultOp | AddOp
MultOp → * | /
AddOp → + | -

///////////////////////////////////////////////////---FunctionCall---///////////////////////////////////////////////////////

ProcedureCall ->  indentifier |  identifier(Parameterlist)
AssignedValue → Expression | string ; | identifier;
FPCallOrAssignemnt -> identifier FunctionCallAssignment2
FunctionCallAssignemnt2 -> Epsilon | := FunctionCallAssignemnt3 | (ParamaterList)
FunctionCallAssignemnt3 -> identifier FunctionCallAssignemnt4 | AssignedValue
FunctionCallAssignemnt4 -> Epsilon | (ParameterList)

///////////////////////////////////////////////////--Statements---//////////////////////////////////////////////////////////////////////
Statements → Statement ; Statements | ε
Statement  → AtomicStatement |
| if Condition then IfStatOption
| while Condition do MultipleStatementBlock
| repeat Statements until Condition
| for identifier := constant to constant do MultipleStatementBlock
| ε

AtomicStatement-> FPCallOrAssignemnt | writeln(Content)| write(Content) | readln (ParametersList) | read (ParametersList)
IfStateOption  MultipleStatmentBlockIF StatementBlock
StatementBlock  else MultiplestatmentBlock | ε
MultipleStatementBlock → begin Statements end | Statement

FPCallOrAssignemnt ->  ProcedureCall |identifier := identifier |  identifier:= identifier(Parameterlist)
Content → string Content2 | identifier Content2
Content2 → , LeftFactorContent|ε
LeftFactorContent  LeftFactorContent2 Content2 | identifier | string
LeftFactorContent2 → string | ParameterList
FPCall → identifier FPCall2
FPCall2 ;|:= FunctionName;
Condition  Expression BoolOp Expression | (Condition) Condition2
Condition 2 BoolOp (Condition) Condition2|ε
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

