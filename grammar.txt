////////////////////////////////////////////Declaration//////////////////////////////////////////////////////////////
Program     →  Header Declsec Block{main}
Header       →  ProgramID Uses
ProgramID →  program identifier ;
Uses          →  Uses PackageList ; | Epsilon

PackageList    →  PackageList Package , | Package
PackageList → Package PackaList*
PackageList* → , Package PackageList’ | ε

Declsec  →   Decls ProcedureDecS
Decls    →  Option Decls | Epsilon
Option -> VarDecls |  ConstDecls |  TypeDecl

VarDecls → var VarDecl | ε
VarDecl → VarldList : Datatype; VarDecl2
VarDecl2 → VarDecl | ε


TypeDecl →  type identifier = Datatype;
TypeDecl → VarIDList = Datatype ; TypeDecl2
TypeDecl2 → TypeDecl | ε
---------------------------------------VarIdList  →  VarIdList, identifier | identifier
VarldList → identifier VarldList*
VarldList* → , identifier VarldList* |ε

Datatype        →  integer| real| char| string| Boolean
ConstDecls    → const Constld | ε
//ConstId   → ConstId identifier =  Constant; | identifier =  Constant;
Constld → identifier = Constant; Constld*
Constld* →  identifier = Constant; Constld* |ε
Constant →  constant | string| boolean
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
------------------------------------------Procedure--------------------------------------------------------------------------------------
-------------------------------ProcedureDecS → ProcedureDecS FuncDecS |  ProcedureDecS ProcedureDec | FuncDecS | ProcedureDec | ε
ProcedureDecS → FP ProcedureDecS*| ε
FP →  FuncDecS | ProcedureDec
ProcedureDecS* → FuncDecS ProcedureDecS| ProcedureDec ProcedureDecS |ε

ParametersList → ParamatersList , identifier | identifier
ParametersList → identifier ParametersList*
ParametersList* → , identifier   ParametersList* | ε

-------------------------------------------Function---------------------------------------------------


FuncDecS → FunctionHeader VarDecls FunctionBlock
FunctionHeader →  function FunctionName (ArgumentsIdList) : Datatype;
FunctionName → identifier
FunctionBlock → begin FunctionStatements end;
FunctionStatements  → Statements FunctionName := Constant ;

ArgumentsIdList → Option ParametersList : Datatype DefaultValue; ArgumentsIdList |ParametersList : Datatype DefaultValue;
OptionArg → const | var | ε
DefaultValue     → ε | = Constant

---------------------------------------------------------------------------------------------------------------------
AssignedValue → Expression | string ; | identifier;
BoolOp → < | > | = | <= | >= | <> | not | and | or | xor
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ArithmOp → MultOp | AddOp
MultOp → * | /
AddOp → + | -

Content → Content , string  |Content , ParameterList | string| identifier
Content → string Content* | identifier Content*

Content* → , B* Content* | , identifier | , string |ε
B* → string | ParameterList
FPCall → identifier; | identifier:=FunctionName;
Condition → Expression BoolOp Expression | ( Condition )

----------------------------Expression → Term | Expression AddOp Term
Expression → Term Exp
Exp → AddOp Term Exp |ε

---------------------------------Term → Term MultOp Factor | Factor
Term → Factor Ter
Ter → MultOp Factor Ter |ε
Factor → identifier|(Expression)


///////////////////////////////////////////////////Draft Area///////////////////////////////////////////////////////
X-> identifier = AssignedValue;
| writeln(ParametersList);
| write(Content); | readln (ParametersList) | read (ParametersList)

IF -> if Condition then IfStatOption

Statement  → X |
| IF
| While
| repeat Statements until Condition ;
| for identifier := integer to integer do MultipleProcedureStatementBlock
| FPCall
| ε

MultipleStatementBlock → begin Statements end; | X;
ifStatOption --> MultipleStatementBlock IfElseOption | X IfElseOption
IfElseOption → else MultipleStatementBlock | ε

////////////////////////////////////////End Draft Area//////////////////////////////////////////////////////////////////

---------------------------------Statement---------------------------------------------------------------------------------------

--------------------------------Statements → Statements ; Statement | Statement
Statements → Statement Statements*
Statements* → ; Statement Statements*| ε
Statement  → readln (ParametersList) | read (ParametersList)
| identifier = AssignedValue; | writeln(ParametersList);
| write(Content);
| if Condition then IfStatOption
| while Condition do MultipleProcedureStatementBlock
| repeat Statements until Condition ;
| for identifier := integer to integer do MultipleProcedureStatementBlock
| FPCall
| ε

ifStatOption --> MultipleStatementBlock IfElseOption | Statment IfElseOption

IfElseOption → else MultipleStatementBlock | ε
MultipleStatementBlock → begin Statements end; | Statement;
Block → begin Statements end .
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

