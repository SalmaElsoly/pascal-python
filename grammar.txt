Program     →  Header Declsec Block{main}
Header       →  ProgramID Uses
ProgramID →  program identifier ;
Uses          →  Uses PackageList ; | Epsilon

PackageList    →  PackageList Package , | Package
PackageList → Package PackaList*
PackageList* → , Package PackageList’ | ε

Declsec  →   Decls ProcedureDecS
Decls    →  Option Decls | Epsilon
Option -> VarDecls |  ConstDecls |  TypeDecl

VarDecls → var VarDecl | ε
VarDecl → VarldList : Datatype; VarDecl2
VarDecl2 → VarDecl | ε
TypeDecl       →  type identifier = Datatype;

---------------------------------------VarIdList  →  VarIdList, identifier | identifier
VarldList → identifier VarldList*
VarldList* → , identifier VarldList* |ε

Datatype        →  integer| real| char| string| Boolean
ConstDecls    → const Constld | ε
//ConstId   → ConstId identifier =  Constant; | identifier =  Constant;
Constld → identifier = Constant; Constld*
Constld* →  identifier = Constant; Constld* |ε
Constant →  constant | string| boolean
--------------------------------------------------------------------------------------------------------------------------------
ProcedureDecS → ProcedureDecS FuncDecS |  ProcedureDecS ProcedureDec | FuncDecS | ProcedureDec | ε
ProcedureDecS → A* ProcedureDecS*|FuncDecS|ProcedureDec| ε
A* →  FuncDecS | ProcedureDec
ProcedureDecS* → FuncDecS ProcedureDecS*| ProcedureDec ProcedureDecS* |ε

ParametersList → ParamatersList , identifier | identifier
ParametersList → identifier ParametersList*
ParametersList* → , identifier   ParametersList* | ε
FPDecl → VarDecls

FuncDecS → FunctionHeader FPDecl FunctionBlock
FunctionHeader →  function FunctionName (ArgumentsIdList) : Datatype;
FunctionName → identifier
FunctionBlock → begin FunctionStatements end;
FunctionStatements  → Statements FunctionName := Constant ;

ArgumentsIdList → Option ParametersList : Datatype DefaultValue; ArgumentsIdList |ParametersList : Datatype DefaultValue;
Option → const | var | ε
DefaultValue     → ε | = Constant

AssignedValue → Expression | string ; | identifier;
BoolOp → < | > | = | <= | >= | <> | not | and | or | xor
ArithmOp → MultOp | AddOp
MultOp → * | /
AddOp → 	+ | -

Content → Content , string  |Content , ParameterList | string| identifier
Content → string Content* | identifier Content*
B* → string | ParameterList
Content* → , B* Content* | , identifier | , string |ε
FPCall → FunctionName;|ProcedureName ; | identifier:=FunctionName;
Condition → Expression BoolOp Expression

Expression → Term | Expression AddOp Term
Expression → Term Exp | Term
Exp → AddOp Term Exp |ε

Term → Term MultOp Factor | Factor
Term → Factor Ter
Ter → MultOp Factor Ter |ε

Factor → identifier|(Expression)
ProcedureDec → ProcedureHeader FPDecl ProcedureBlock
ProcedureBlock → begin Statements end;
ProcedureHeader →  procedure ProcedureName (ArgumentsIdList) ;
ProcedureName → identifier

--------------------------------Statements → Statements ; Statement | Statement
Statements → Statement Statements*
Statements* → ; Statement Statements*| ε


Statement   → readln (ParametersList) | read (ParametersList)
| identifier = AssignedValue; | writeln(ParametersList);
| write(Content);
| if Condition then IfStatOption
| while Condition do MultipleProcedureStatementBlock
| repeat Statements until Condition ;
| for identifier := integer to integer do MultipleProcedureStatementBlock
| FPCall
| ε

ifStatOption --> MultipleStatementBlock IfElseOption | Statment IfElseOption

IfElseOption → else MultipleStatementBlock | ε
MultipleStatementBlock → begin Statements end; | statement;
Block → begin Statements end .


